//Global variables
itemList = [];
newAddedItem = [];

const psListTable = (obj)=>{
    //Global variables
    itemList = [];
    let rowcount = 1, currencyfield = '';
    //Function to add subtotal and add row button
    let initializeTableFooter = (tableElm)=>{
        //Create an empty div element
        let divTag = document.createElement('div');
        //Add the html to the created div
        divTag.innerHTML = `
            <div class="row mt-2 psListTableFooterDiv">
                <div class="col-md-6 mt-3">
                    <h5 class="psListTableFooterSubtotal">Subtotal:<span class="text-danger ml-2 psListTable_subtotal">0.00</span></h5>
                </div>
                <div class="col-md-6 mt-3 text-right">
                    <button class="btn ovasyte-bg-primary psListTable_add_btn" type="button"><i class="icon-add mr-1"></i> Add Row</button>
                </div>
            </div>
        `;
        //Get parent element of the main table
        let parentDiv  = tableElm.parentElement;
        //Append new html (the created div) to the parent element of the table
        $('.psListTableFooterDiv').remove();
        parentDiv.appendChild(divTag);
    }

    //Currency onchange
    let currencyChangeEvent = () => {
        if (obj.currency) {
            let currencyTag = (typeof(obj.currency) == 'object') ? obj.currency : obj.currency;
            let elmId = currencyTag.id;
            $('#'+elmId).change(function(){
                let currency = ($(this).val() == undefined || $(this).val() == '') ? '' : $(this).val().toUpperCase();
                $('.psListTable_total').each((i, elm)=>{
                    let amount = elm.innerText.replace(/[^0-9\.]+/g,"");
                    $(elm).text(currency + ' ' + formatNumber(Number(amount)));
                });

                currencyfield = currency;
    
                let subtotal = $('.psListTable_subtotal').text();
                subtotal = subtotal.replace(/[^0-9\.]+/g,"");
                $('.psListTable_subtotal').text(currency + ' ' + formatNumber(Number(subtotal)));
            });

            $('#'+elmId).keyup(function(){
                let currency = ($(this).val() == undefined || $(this).val() == '') ? '' : $(this).val().toUpperCase();
                $('.psListTable_total').each((i, elm)=>{
                    let amount = elm.innerText.replace(/[^0-9\.]+/g,"");
                    $(elm).text(currency + ' ' + formatNumber(Number(amount)));
                });

                currencyfield = currency;
    
                let subtotal = $('.psListTable_subtotal').text();
                subtotal = subtotal.replace(/[^0-9\.]+/g,"");
                $('.psListTable_subtotal').text(currency + ' ' + formatNumber(Number(subtotal)));
            });
        }
    }

    //Function to recreate table
    let recreateTable = (itemList)=> {
        // console.log(itemList);
        if (itemList.length > 0) {
            let currency = (currencyfield == undefined || currencyfield == '') ? '' : currencyfield.toUpperCase();
            $('.psListTable_tbody').html('');
            let subtotal = 0;
            for (let i = 0; i < itemList.length; i++) {
                let trHtml = `<tr class="psListTable_tr_${itemList[i].rowcount}">`;
                trHtml += `<td> ${i+1} </td>`;

                let fieldName_unitprice, fieldName_quantity;

                let columnWidth = 0;
                if (obj.ifTotal) {
                    columnWidth = (obj.columns.length + 2) / 100;
                } else {
                    columnWidth = (obj.columns.length + 1) / 100;
                }

                for (let j = 0; j < obj.columns.length; j++) {
                    let fieldName = obj.columns[j].title.toLowerCase().split(' ').join("_");
                    let calculatetype = obj.columns[j].calculateType;
                    
                    if (calculatetype == 'unit_price') {
                        fieldName_unitprice = fieldName;
                    }

                    if (calculatetype == 'quantity') {
                        fieldName_quantity = fieldName;
                    }

                    let fieldHtml = '';
                    if (obj.columns[j].dataType == 'text') {
                        fieldHtml = `<input type="text" class="form-control psListTableFieldEvent calculatetype_${calculatetype}_${itemList[i].rowcount} psListTable_${fieldName}_${itemList[i].rowcount}" data-rowcount="${itemList[i].rowcount}" data-index="${i}" data-fieldname="${fieldName}" data-calctype="${calculatetype}" value="${itemList[i][fieldName]}" placeholder="${obj.columns[j].title}" style="min-width=${columnWidth}%; max-width:15vw;"/>`;
                    } else if (obj.columns[j].dataType == 'datalist') {
                        let optionsHtml = '';
                        if (obj.columns[j].datalistOptions.length > 0) {
                            for (let k = 0; k < obj.columns[j].datalistOptions.length; k++) {
                                optionsHtml += `<option value="${obj.columns[j].datalistOptions[k].name}" />`;
                            }
                        }
                        fieldHtml = `
                            <input list="psListTable_${fieldName}" class="form-control psListTableFieldEvent calculatetype_${calculatetype}_${itemList[i].rowcount} psListTable_${fieldName}_${itemList[i].rowcount}" data-rowcount="${itemList[i].rowcount}" data-index="${i}" data-fieldname="${fieldName}" data-calctype="${calculatetype}" value="${itemList[i][fieldName]}" placeholder="${obj.columns[j].title}" style="min-width=${fieldName == 'uom' ? columnWidth+'%' : '25vw'}; max-width:25vw;"/>
                            <datalist id="psListTable_${fieldName}" class="psListTable_${fieldName}_datalist_${itemList[i].rowcount}">
                                ${optionsHtml}
                            </datalist>
                        `;
                    } else if (obj.columns[j].dataType == 'select') {
                        let optionsHtml = '';
                        if (newAddedItem.length > 0) {
                            for (let m = 0; m < newAddedItem.length; m++) {
                                if (obj.columns[j].title == newAddedItem[m].columnTitle) {
                                    let value = newAddedItem[m].id+'**'+newAddedItem[m].name;
                                    if (value == itemList[i][fieldName]) {
                                        optionsHtml += `<option value="${newAddedItem[m].id}**${newAddedItem[m].name}" selected> ${newAddedItem[m].name} </option>`;
                                    } else {
                                        optionsHtml += `<option value="${newAddedItem[m].id}**${newAddedItem[m].name}"> ${newAddedItem[m].name} </option>`;
                                    }
                                }
                            }
                        }
                        if (obj.columns[j].datalistOptions.length > 0) {
                            for (let k = 0; k < obj.columns[j].datalistOptions.length; k++) {
                                let item = obj.columns[j].datalistOptions[k];
                                let value = (obj.columns[j].valueById) ? item.id + '**' + item.name : item.id;
                                if (value == itemList[i][fieldName]) {
                                    rowcount = itemList[i].rowcount;
                                    optionsHtml += `<option value="${value}" selected> ${item.name} </option>`;
                                } else {
                                    optionsHtml += `<option value="${value}"> ${item.name} </option>`;
                                }
                            }
                        }
                        fieldHtml = `
                            <select class="form-control psListTableFieldEvent calculatetype_${calculatetype}_${itemList[i].rowcount} psListTable_${fieldName}_${itemList[i].rowcount}" data-rowcount="${itemList[i].rowcount}" data-index="${i}" data-fieldname="${fieldName}" data-calctype="${calculatetype}" style="min-width=${columnWidth}%; max-width:15vw;">
                                <option value=""> Select ${obj.columns[j].title} </option>
                                ${optionsHtml}
                            </select>
                        `;
                    } else if (obj.columns[j].dataType == 'number') {
                        fieldHtml = `<input type="number" class="form-control psListTableFieldEvent calculatetype_${calculatetype}_${itemList[i].rowcount} psListTable_${fieldName}_${itemList[i].rowcount}" data-rowcount="${itemList[i].rowcount}" data-index="${i}" data-fieldname="${fieldName}" data-calctype="${calculatetype}" value="${itemList[i][fieldName]}" step="${obj.columns[j].calculateType == 'quantity' ? '0.1' : '0.01'}" placeholder="${obj.columns[j].title}" style="min-width=${columnWidth}%; max-width:15vw;"/>`;
                    } else if (obj.columns[j].dataType == 'date') {
                        fieldHtml = `<input type="date" class="form-control psListTableFieldEvent calculatetype_${calculatetype}_${itemList[i].rowcount} psListTable_${fieldName}_${itemList[i].rowcount}" data-rowcount="${itemList[i].rowcount}" data-index="${i}" data-fieldname="${fieldName}" data-calctype="${calculatetype}" value="${itemList[i][fieldName]}" placeholder="${obj.columns[j].title}" style="min-width=${columnWidth}%; max-width:15vw;"/>`;
                    }
                    trHtml += `<td> ${fieldHtml} </td>`;
                }
                if (obj.ifTotal) {
                    let total;
                    if (fieldName_unitprice != undefined && fieldName_quantity != undefined) {
                        total = Number(itemList[i][fieldName_unitprice]) * Number(itemList[i][fieldName_quantity]);
                        subtotal = (subtotal + total);
                    } else {
                        total = 0.00;
                    }
                    
                    trHtml += ` 
                        <td> <span class="psListTable_total psListTable_total_${itemList[i].rowcount}" data-rowcount="${itemList[i].rowcount}" data-index="${i}"> ${currency + ' ' + formatNumber(total)} </span> </td> 
                        <td> <button type="button" class="btn btn-danger psListTable_remove_btn psListTable_remove_btn_${itemList[i].rowcount}" data-rowcount="${itemList[i].rowcount}" data-index="${i}"> <i class="icon-close2"></i> </button> </td> 
                    `;
                } else {
                    trHtml += ` 
                        <td> <button type="button" class="btn btn-danger psListTable_remove_btn psListTable_remove_btn_${itemList[i].rowcount}" data-rowcount="${itemList[i].rowcount}" data-index="${i}"> <i class="icon-close2"></i> </button> </td> 
                    `;
                }
                trHtml += `</tr>`;
                $('.psListTable_tbody').append(trHtml);
                // if (select2 != undefined) { 
                    for (let j = 0; j < obj.columns.length; j++) {
                        let fieldName = obj.columns[j].title.toLowerCase().split(' ').join("_");
                        $('select.psListTable_'+fieldName+'_'+itemList[i].rowcount).select2({
                            placeholder: "Select "+obj.columns[j].title
                        });
                        $('tr.psListTable_tr_'+itemList[i].rowcount+' td span.select2-container--default').removeAttr("style");
                        $('tr.psListTable_tr_'+itemList[i].rowcount+' td span.select2-container--default').attr("style", "margin-top:22px; min-width="+columnWidth+"%; max-width:15vw;");
                    }
                // }
            }
            $('.psListTable_subtotal').text(currency + ' ' + formatNumber(subtotal));
            $('.psListTable_subtotal_value').val(Number(subtotal));
            setTimeout(()=>{
                $('.psListTable_subtotal_value').trigger('change');
            }, 500);
        } else {
            let colspan = (obj.ifTotal) ? (obj.columns.length + 3) : (obj.columns.length + 2);
            $('.psListTable_tbody').html(`<tr> <td colspan="${colspan}"> No items were added to list </td> </tr>`);
        }
    }

    //Add rows event
    let addRowClickEvent = ()=>{
        //Add click event to the add button
        $('.psListTable_add_btn').off('click').on('click', function(e) {
            e.preventDefault();

            //Increment rowcount
            rowcount++;

            //Clear table before append if itemList is empty
            if (itemList.length == 0 || itemList.length < 1) {
                $('.psListTable_tbody').html(``);
            }
            
            //Initialize data object for getting index for the main itemList array
            let itemListObject = {
                index: itemList.length,
                rowcount: rowcount
            };

            let columnsHtml = `<td> ${itemList.length + 1} </td>`;
            let columnWidth = 0;
            if (obj.ifTotal) {
                columnWidth = (obj.columns.length + 2) / 100;
            } else {
                columnWidth = (obj.columns.length + 1) / 100;
            }
            for (let i = 0; i < obj.columns.length; i++) {
                //Push title of column as an index of the itemListObject
                itemListObject[obj.columns[i].title.toLowerCase().split(' ').join("_")] = '';
                let calculatetype = obj.columns[i].calculateType;

                let fieldName = obj.columns[i].title.toLowerCase().split(' ').join("_");
                let fieldHtml = '';
                if (obj.columns[i].dataType == 'text') {
                    fieldHtml = `<input type="text" class="form-control psListTableFieldEvent calculatetype_${calculatetype}_${rowcount} psListTable_${fieldName}_${rowcount}" data-rowcount="${rowcount}" data-index="${itemList.length}" data-fieldname="${fieldName}" data-calctype="${calculatetype}" placeholder="${obj.columns[i].title}" style="min-width=${columnWidth}%; max-width:15vw;"/>`;
                } else if (obj.columns[i].dataType == 'datalist') {
                    let optionsHtml = '';
                    if (obj.columns[i].datalistOptions.length > 0) {
                        for (let k = 0; k < obj.columns[i].datalistOptions.length; k++) {
                            optionsHtml += `<option value="${obj.columns[i].datalistOptions[k].name}" />`;
                        }
                    }
                    fieldHtml = `
                        <input list="psListTable_${fieldName}" class="form-control psListTableFieldEvent calculatetype_${calculatetype}_${rowcount} psListTable_${fieldName}_${rowcount}" data-rowcount="${rowcount}" data-index="${itemList.length}" data-fieldname="${fieldName}" data-calctype="${calculatetype}" placeholder="${obj.columns[i].title}" style="min-width=${fieldName == 'uom' ? columnWidth+'%' : '25vw'}; max-width:25vw;"/>
                        <datalist id="psListTable_${fieldName}" class="psListTable_${fieldName}_datalist_${rowcount}">
                            ${optionsHtml}
                        </datalist>
                    `;
                } else if (obj.columns[i].dataType == 'select') {
                    let optionsHtml = '';
                    if (newAddedItem.length > 0) {
                        for (let m = 0; m < newAddedItem.length; m++) {
                            if (obj.columns[i].title == newAddedItem[m].columnTitle) {
                                optionsHtml += `<option value="${newAddedItem[m].id}**${newAddedItem[m].name}"> ${newAddedItem[m].name} </option>`;
                            }
                        }
                    }
                    if (obj.columns[i].datalistOptions.length > 0) {
                        for (let k = 0; k < obj.columns[i].datalistOptions.length; k++) {
                            let item = obj.columns[i].datalistOptions[k];
                            let value = (obj.columns[i].valueById) ? item.id + '**' + item.name : item.id;
                            let valueDisplay = item.name;
                            optionsHtml += `<option value="${value}"> ${valueDisplay} </option>`;
                        }
                    }
                    fieldHtml = `
                        <select class="form-control psListTableFieldEvent calculatetype_${calculatetype}_${rowcount} psListTable_${fieldName}_${rowcount}" data-rowcount="${rowcount}" data-index="${itemList.length}" data-fieldname="${fieldName}" data-calctype="${calculatetype}" style="max-width:15vw;">
                            <option value="" selected> Select ${obj.columns[i].title} </option>
                            ${optionsHtml}
                        </select>
                    `;
                } else if (obj.columns[i].dataType == 'number') {
                    fieldHtml = `<input type="number" class="form-control psListTableFieldEvent calculatetype_${calculatetype}_${rowcount} psListTable_${fieldName}_${rowcount}" data-rowcount="${rowcount}" data-index="${itemList.length}" data-fieldname="${fieldName}" data-calctype="${calculatetype}" step="${obj.columns[i].calculateType == 'quantity' ? '0.1' : '0.01'}" placeholder="${obj.columns[i].title}" style="min-width=${columnWidth}%; max-width:15vw;"/>`;
                } else if (obj.columns[i].dataType == 'date') {
                    fieldHtml = `<input type="date" class="form-control psListTableFieldEvent calculatetype_${calculatetype}_${rowcount} psListTable_${fieldName}_${rowcount}" data-rowcount="${rowcount}" data-index="${itemList.length}" data-fieldname="${fieldName}" data-calctype="${calculatetype}" placeholder="${obj.columns[i].title}" style="min-width=${columnWidth}%; max-width:15vw;"/>`;
                }
                columnsHtml += `<td> ${fieldHtml} </td>`;
            }

            if (obj.ifTotal) {
                columnsHtml += ` 
                    <td> <span class="psListTable_total psListTable_total_${rowcount}" data-rowcount="${rowcount}" data-index="${itemList.length - 1}"> 0.00 </span> </td> 
                    <td> <button type="button" class="btn btn-danger psListTable_remove_btn psListTable_remove_btn_${rowcount}" data-rowcount="${rowcount}" data-index="${itemList.length - 1}"> <i class="icon-close2"></i> </button> </td> 
                `;
            } else {
                columnsHtml += ` 
                    <td> <button type="button" class="btn btn-danger psListTable_remove_btn psListTable_remove_btn_${rowcount}" data-rowcount="${rowcount}" data-index="${itemList.length - 1}"> <i class="icon-close2"></i> </button> </td> 
                `;
            }

            //Push setup itemListObject into main itemList array
            itemList.push(itemListObject);

            $('.psListTable_tbody').append(`
                <tr class="psListTable_tr_${rowcount}">
                    ${columnsHtml}
                </tr>
            `);

            // if (select2 != undefined) { 
                for (let i = 0; i < obj.columns.length; i++) {
                    let fieldName = obj.columns[i].title.toLowerCase().split(' ').join("_");
                    $('select.psListTable_'+fieldName+'_'+rowcount).select2({
                        placeholder: "Select "+obj.columns[i].title
                    });
                    $('tr.psListTable_tr_'+rowcount+' td span.select2-container--default').removeAttr("style");
                    $('tr.psListTable_tr_'+rowcount+' td span.select2-container--default').attr("style", "margin-top:22px; min-width="+columnWidth+"%;  max-width:15vw;");
                }
            // }
        });
    }

    //Remove rows event
    let removeRowEvent = ()=>{
        $(document).off('click.psListTableClick');
        //Remove click event to remove rows from table
        $(document).on('click.psListTableClick', 'button.psListTable_remove_btn', function(e) {
            e.preventDefault();

            //Get rowcount to remove a row (tr)
            let dataId = $(this).data("rowcount");

            //Filter array with the exception of the dataId
            let newData = itemList.filter((data)=>{
                return data.rowcount != dataId;
            });

            itemList = newData;

            $('.psListTable_tr_'+dataId).remove();

            //Call the recreateTable function to re-create the table
            recreateTable(itemList);
        });
    }

    //Format number to currency reading
    let formatNumber = (num)=> {
        return num.toFixed(2).replace(/\d(?=(\d{3})+\.)/g, '$&,');
    }

    //Insert List Data Method
    let insertListData = (dataId, fieldName, index)=>{
        let subtotal = 0;

        let data =  $('.psListTable_'+fieldName+'_'+dataId).val();

        itemList[index][fieldName] = data;

        let currency = (currencyfield == undefined || currencyfield == '') ? '' : currencyfield.toUpperCase();

        let unit_price = $('.calculatetype_unit_price_'+dataId).val();
        let quantity = $('.calculatetype_quantity_'+dataId).val();

        let total = Number(unit_price) * Number(quantity);
        $('.psListTable_total_'+dataId).text(currency + ' ' + formatNumber(total));

        for (let i = 0; i < itemList.length; i++) {
            let unitpriceFieldName = $('.calculatetype_unit_price_'+dataId).data("fieldname");
            let quantityFieldName = $('.calculatetype_quantity_'+dataId).data("fieldname");
            subtotal = subtotal + (Number(itemList[i][unitpriceFieldName]) * Number(itemList[i][quantityFieldName]));
        }
        $('.psListTable_subtotal').text(currency + ' ' + formatNumber(subtotal));
        $('.ps_create_invoice_subtotal').val(subtotal);
        $('.psListTable_subtotal_value').val(Number(subtotal));
        setTimeout(()=>{
            $('.psListTable_subtotal_value').trigger('change');
        }, 500);
    }

    //Insert List Data Event
    let insertListDataEvent = ()=>{
        $(document).off('keyup.psListTableKeyup');
        $(document).off('change.psListTableChange');

        $(document).on('keyup.psListTableKeyup', 'input.psListTableFieldEvent, select.psListTableFieldEvent', function(e) {
            let dataId = $(this).data("rowcount");
            let fieldName = $(this).data("fieldname");
            let index = $(this).data("index");

            insertListData(dataId, fieldName, index);
        });

        $(document).on('change.psListTableChange', 'input.psListTableFieldEvent, select.psListTableFieldEvent', function(e) {
            let dataId = $(this).data("rowcount");
            let fieldName = $(this).data("fieldname");
            let index = $(this).data("index");

            insertListData(dataId, fieldName, index);
        });
    }

    //Dropdown data for update
    let insertDropdownDataForUpdate = (data) => {
        //Check if data for the table is added
        if (data && data.length > 0) {
            itemList = data;
            rowcount = data.length;
            recreateTable(itemList);
        }
    }

    //Check if parameter is object
    if (typeof(obj) === 'object') {
        //Check for valid table element
        if (obj.table && obj.table.nodeName == 'TABLE') {
            //Get currency
            currencyfield = (obj.currency == undefined || obj.currency == null || obj.currency == '') ? '' : obj.currency.value;

            //Setup table 
            obj.table.innerHTML = `
                <thead class="psListTable_thead"> <tr class="psListTable_thead_tr ovasyte-bg-primary"> <th>#</th> <tr> </thead>
                <tbody class="psListTable_tbody"> <tr class="psListTable_tr_1"> <td>1</td> </tr> </tbody>
            `;
            //Set up columns
            if (obj.columns.length > 0) {
                //Initialize data object for getting index for the main itemList array
                let itemListObject = {
                    index: 0,
                    rowcount: 1
                };
                //Loop to get table heads
                let columnWidth = 0;
                if (obj.ifTotal) {
                    columnWidth = (obj.columns.length + 2) / 100;
                } else {
                    columnWidth = (obj.columns.length + 1) / 100;
                }
                for (let i = 0; i < obj.columns.length; i++) {
                    //Push title of column as an index of the itemListObject
                    itemListObject[obj.columns[i].title.toLowerCase().split(' ').join("_")] = '';
                    let calculatetype = obj.columns[i].calculateType;

                    //Append html 
                    $('.psListTable_thead_tr').append(`
                        <th style="width=${columnWidth}%;"> ${obj.columns[i].title} </th>
                    `);
                    let fieldName = obj.columns[i].title.toLowerCase().split(' ').join("_");
                    let fieldHtml = '';
                    if (obj.columns[i].dataType == 'text') {
                        fieldHtml = `<input type="text" class="form-control psListTableFieldEvent calculatetype_${calculatetype}_${rowcount} psListTable_${fieldName}_1" data-rowcount="1" data-index="0" data-fieldname="${fieldName}" data-calctype="${calculatetype}" placeholder="${obj.columns[i].title}" style="min-width=${columnWidth}%; max-width:15vw;"/>`;
                    } else if (obj.columns[i].dataType == 'datalist') {
                        let optionsHtml = '';
                        if (obj.columns[i].datalistOptions.length > 0) {
                            for (let k = 0; k < obj.columns[i].datalistOptions.length; k++) {
                                optionsHtml += `<option value="${obj.columns[i].datalistOptions[k].name}" />`;
                            }
                        }
                        fieldHtml = `
                            <input list="psListTable_${fieldName}" class="form-control psListTableFieldEvent calculatetype_${calculatetype}_${rowcount} psListTable_${fieldName}_1" data-rowcount="1" data-index="0" data-fieldname="${fieldName}" data-calctype="${calculatetype}" placeholder="${obj.columns[i].title}" style="min-width=${fieldName == 'uom' ? columnWidth+'%' : '25vw'}; max-width:25vw;"/>
                            <datalist id="psListTable_${fieldName}" class="psListTable_${fieldName}_datalist_1">
                                ${optionsHtml}
                            </datalist>
                        `;
                    } else if (obj.columns[i].dataType == 'select') {
                        let optionsHtml = '';
                        if (obj.columns[i].datalistOptions.length > 0) {
                            for (let k = 0; k < obj.columns[i].datalistOptions.length; k++) {
                                let item = obj.columns[i].datalistOptions[k];
                                let value = (obj.columns[i].valueById) ? item.id + '**' + item.name : item.id;
                                let valueDisplay = item.name;
                                optionsHtml += `<option value="${value}"> ${valueDisplay} </option>`;
                            }
                        }
                        fieldHtml = `
                            <select class="form-control psListTableFieldEvent calculatetype_${calculatetype}_${rowcount} psListTable_${fieldName}_1" data-rowcount="1" data-index="0" data-fieldname="${fieldName}" data-calctype="${calculatetype}" style="min-width=${columnWidth}%; max-width:15vw;">
                                <option value="" selected> Select ${obj.columns[i].title} </option>
                                ${optionsHtml}
                            </select>
                        `;
                    } else if (obj.columns[i].dataType == 'number') {
                        fieldHtml = `<input type="number" class="form-control psListTableFieldEvent calculatetype_${calculatetype}_${rowcount} psListTable_${fieldName}_1" data-rowcount="1" data-index="0" data-fieldname="${fieldName}" data-calctype="${calculatetype}" step="${obj.columns[i].calculateType == 'quantity' ? '0.1' : '0.01'}" placeholder="${obj.columns[i].title}" style="min-width=${columnWidth}%; max-width:15vw;"/>`;
                    } else if (obj.columns[i].dataType == 'date') {
                        fieldHtml = `<input type="date" class="form-control psListTableFieldEvent calculatetype_${calculatetype}_${rowcount} psListTable_${fieldName}_1" data-rowcount="1" data-index="0" data-fieldname="${fieldName}" data-calctype="${calculatetype}" placeholder="${obj.columns[i].title}" style="max-width:100%;" style="min-width=${columnWidth}%; max-width:15vw;"/>`;
                    }
                    $('.psListTable_tr_1').append(`
                        <td> ${fieldHtml} </td>
                    `);
                    // if (select2 != undefined) { 
                        $('select.psListTable_'+fieldName+'_1').select2({
                            placeholder: "Select "+obj.columns[i].title
                        });
                        $('tr.psListTable_tr_1 td span.select2-container--default').removeAttr("style");
                        $('tr.psListTable_tr_1 td span.select2-container--default').attr("style", "margin-top:22px; min-width="+columnWidth+"%; max-width:15vw;");
                    // }
                }
                //If total is present add total column otherwise only action
                if (obj.ifTotal) {
                    $('.psListTable_thead_tr').append(` <th> Total </th> <th> Action </th> `);
                    $('.psListTable_tr_1').append(` 
                        <td> <span class="psListTable_total psListTable_total_1" data-rowcount="1" data-index="0"> 0.00 </span> </td> 
                        <td> <button type="button" class="btn btn-danger psListTable_remove_btn psListTable_remove_btn_1" data-rowcount="1" data-index="0"> <i class="icon-close2"></i> </button> </td> 
                    `);
                } else {
                    $('.psListTable_thead_tr').append(` <th> Action </th> `);
                    $('.psListTable_tr_1').append(` 
                        <td> <button type="button" class="btn btn-danger psListTable_remove_btn psListTable_remove_btn_1" data-rowcount="1" data-index="0"> <i class="icon-close2"></i> </button> </td> 
                    `);
                }
                //Push setup itemListObject into main itemList array
                itemList.push(itemListObject);

                //Call to initialize click events
                initializeTableFooter(obj.table);
                currencyChangeEvent();
                addRowClickEvent();
                insertListDataEvent();
                removeRowEvent();
                insertDropdownDataForUpdate(obj.listData);
                
            } else {
                obj.table.innerHTML = `<thead class="psListTable_thead"> <tr> <th>No columns were specified</th> <tr> </thead>`;
            }
        } else {
            console.error('Invalid table');
        }
    } else {
        console.error('The specified parameter is not valid');
    }
}